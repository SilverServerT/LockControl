# Advanced Wiegand Access Control System
# Version 2.1.0

# Core Switch Configuration
switch:
  - platform: mqtt
    name: "Magnetic Lock"
    state_topic: "stat/tasmota/POWER"
    command_topic: "cmnd/tasmota/POWER"
    payload_on: "ON"
    payload_off: "OFF"
    state_on: "ON"
    state_off: "OFF"
    optimistic: false
    qos: 1
    retain: false

# Weather Configuration
weather:
  forecast_home:
    platform: template
    name: "Weather Forecast"
    temperature_template: "{{ states('sensor.weather_temperature') }}"
    condition_template: "{{ states('sensor.weather_condition') }}"

# Sun Configuration
sun:
  sun:
    name: "Sun"
    elevation: 0
    azimuth: 0

# Brandweer Notifications
sensor:
  friesland:
    name: "Brandweer Friesland"
    state_class: measurement
    device_class: timestamp

# Garbage Collection
sensor:
  omrin_tomorrow:
    name: "Tomorrow's Garbage"
    state_class: measurement

# Input Text Configuration
input_text:
  lockcontrol_daily_code:
    name: "Lock Control Daily Access Code"
    max: 6
    min: 6
    pattern: "[0-9]*"
    mode: text
    initial: "123456"

  allowed_codes:
    name: "Allowed Codes"
    initial: "123456,654321,112233"

  version:
    name: "System Version"
    max: 10
    min: 1
    mode: text
    initial: "2.1.0"

  version_lockcontrol:
    name: "Lock Control Version"
    max: 10
    min: 1
    mode: text
    initial: "2.1.0"

# Input Number Configuration
input_number:
  max_attempts:
    name: "Max Access Attempts"
    min: 1
    max: 10
    step: 1
    mode: box
    icon: mdi:counter

  lockout_duration:
    name: "Lockout Duration"
    min: 60
    max: 3600
    step: 60
    mode: box
    unit_of_measurement: seconds
    icon: mdi:timer

  unlock_time:
    name: "Lock Unlock Time"
    min: 0
    max: 1440  # 24 hours in minutes
    step: 1
    mode: box

# Input Datetime Configuration
input_datetime:
  lock_unlock_end:
    name: "Lock Unlock End"
    has_date: true
    has_time: true
    initial: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
  lockcontrol_daily_code_expiry:
    name: "Lock Control Daily Code Expiry"
    has_date: true
    has_time: true
  lockcontrol_one_time_code_expiry:
    name: "Lock Control One Time Code Expiry"
    has_date: true
    has_time: true

# Input Boolean Configuration
input_boolean:
  daily_code_enabled:
    name: "Daily Code Enabled"
    icon: mdi:lock
  daily_code_used:
    name: "Daily Code Used"
    icon: mdi:check-circle

# Input Select Configuration
input_select:
  access_mode:
    name: "Access Mode"
    options:
      - "Normal"
      - "Extended"
      - "Restricted"
    icon: mdi:clock-time-four

# Automation Configuration
automation:
  - id: "initialize_lock_timer"
    alias: "Initialize Lock Timer"
    description: "Initialize the lock timer on startup"
    trigger:
      - platform: homeassistant
        event: start
    action:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.lock_unlock_end
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

  - id: "unlock_on_valid_code"
    alias: "Unlock on Valid Code"
    description: "Unlocks the door when a valid code is received"
    trigger:
      - platform: mqtt
        topic: "keylock/access_code"
    condition:
      - condition: template
        value_template: "{{ trigger.payload in states('input_text.allowed_codes').split(',') }}"
      - condition: state
        entity_id: switch.tasmota
        state: "on"
    action:
      - service: switch.turn_off
        target:
          entity_id: switch.tasmota
      - delay: "00:00:10"  # Unlock duration
      - service: switch.turn_on
        target:
          entity_id: switch.tasmota

  - id: "generate_daily_code"
    alias: "Generate Daily Code"
    description: "Generates a new daily code at midnight"
    trigger:
      - platform: time
        at: "00:00:00"
    action:
      - service: input_text.set_value
        target:
          entity_id: input_text.lockcontrol_daily_code
        data:
          value: "{{ range(100000, 999999) | random }}"
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.daily_code_used
      - service: notify.access_control_notifications
        data:
          message: "New daily code has been generated"
          title: "Access Control Update"

  - id: "validate_daily_code"
    alias: "Validate Daily Code"
    description: "Validates the daily code and manages access"
    trigger:
      - platform: mqtt
        topic: "keylock/access_code"
    condition:
      - condition: state
        entity_id: input_boolean.daily_code_enabled
        state: "on"
      - condition: template
        value_template: "{{ trigger.payload == states('input_text.lockcontrol_daily_code') }}"
      - condition: state
        entity_id: input_boolean.daily_code_used
        state: "off"
    action:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.daily_code_used
      - service: switch.turn_off
        target:
          entity_id: switch.tasmota
      - delay: "00:00:10"
      - service: switch.turn_on
        target:
          entity_id: switch.tasmota
      - service: notify.access_control_notifications
        data:
          message: "Door unlocked using daily code"
          title: "Access Granted"

  - id: "notify_daily_code_usage"
    alias: "Notify Daily Code Usage"
    description: "Notifies when daily code is used"
    trigger:
      - platform: state
        entity_id: input_boolean.daily_code_used
        to: "on"
    action:
      - service: notify.access_control_notifications
        data:
          message: "Daily code has been used. New code will be generated at midnight."
          title: "Daily Code Status"

  - id: "auto_relock_after_duration"
    alias: "Auto Re-Lock After Timed Unlock"
    description: "Automatically locks the door when the unlock timer expires"
    trigger:
      - platform: template
        value_template: >
          {{ now().timestamp() | int >= as_timestamp(states('input_datetime.lock_unlock_end')) | int
             and states('switch.tasmota') == 'off'
             and states('input_datetime.lock_unlock_end') != '1970-01-01 00:00:00' }}
    action:
      # Lock the door
      - service: switch.turn_on
        target:
          entity_id: switch.tasmota
      # Reset the unlock timer
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.lock_unlock_end
        data:
          datetime: "1970-01-01 00:00:00"
      # Notify that the door has been locked
      - service: notify.access_control_notifications
        data:
          message: "Door has been automatically locked after timed unlock"
          title: "Door Locked"

  - id: "cancel_timed_unlock_on_manual_lock"
    alias: "Cancel Timed Unlock on Manual Lock"
    description: "Cancels any timed unlock when the door is manually locked"
    trigger:
      - platform: state
        entity_id: switch.tasmota
        to: "on"
    condition:
      - condition: template
        value_template: "{{ states('input_datetime.lock_unlock_end') != '1970-01-01 00:00:00' }}"
    action:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.lock_unlock_end
        data:
          datetime: "1970-01-01 00:00:00"

# Script Configuration
script:
  unlock_for_duration:
    alias: "Unlock for Duration"
    description: "Unlocks the door for a specified duration"
    fields:
      seconds:
        description: "Duration in seconds to keep the door unlocked"
        example: 300
    sequence:
      # First unlock the door
      - service: switch.turn_off
        target:
          entity_id: switch.tasmota
      # Set the unlock end time
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.lock_unlock_end
        data:
          datetime: "{{ (now() + timedelta(seconds=seconds | int)).strftime('%Y-%m-%d %H:%M:%S') }}"

  unlock_until_sunset:
    alias: "Unlock until Sunset"
    description: "Unlocks the door until sunset"
    sequence:
      # First unlock the door
      - service: switch.turn_off
        target:
          entity_id: switch.tasmota
      # Set the unlock end time to sunset
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.lock_unlock_end
        data:
          datetime: "{{ states('sun.sun').attributes.next_setting }}"

  reset_daily_code:
    alias: "Reset Daily Code"
    sequence:
      - service: input_text.set_value
        target:
          entity_id: input_text.lockcontrol_daily_code
        data:
          value: "{{ range(100000, 999999) | random }}"
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.daily_code_used
      - service: notify.access_control_notifications
        data:
          message: "Daily code has been reset"
          title: "Access Control Update"

# Notification Configuration
notify:
  - platform: homeassistant
    name: "Access Control Notifications"

# Add Lovelace Dashboard Configuration
lovelace:
  mode: yaml
  resources:
    - url: /hacsfiles/lovelace-card-mod/card-mod.js
      type: module
    - url: /hacsfiles/lovelace-auto-entities/auto-entities.js
      type: module

# Add Dashboard Views
views:
  - title: "Access Control"
    path: access-control
    theme: default
    cards:
      - type: vertical-stack
        cards:
          - type: entities
            title: "Access Control Status"
            theme: default
            entities:
              - entity: input_boolean.daily_code_enabled
                name: "Daily Code System"
                icon: mdi:lock
              - entity: input_boolean.daily_code_used
                name: "Daily Code Status"
                icon: mdi:check-circle
              - entity: input_text.lockcontrol_daily_code
                name: "Current Daily Code"
                icon: mdi:key
              - entity: input_datetime.lockcontrol_daily_code_expiry
                name: "Code Expiry"
                icon: mdi:clock-outline

          - type: horizontal-stack
            cards:
              - type: button
                name: "Reset Daily Code"
                icon: mdi:refresh
                tap_action:
                  action: call-service
                  service: script.reset_daily_code
                entity: script.reset_daily_code
                show_state: false

              - type: button
                name: "Toggle Daily Code System"
                icon: mdi:power
                tap_action:
                  action: call-service
                  service: input_boolean.toggle
                  target:
                    entity_id: input_boolean.daily_code_enabled
                entity: input_boolean.daily_code_enabled
                show_state: true

          - type: markdown
            title: "Access Control Information"
            content: >
              ### Daily Code System
              * A new 6-digit code is generated at midnight
              * Each code can only be used once per day
              * The door unlocks for 10 seconds when a valid code is entered
              * Notifications are sent for all access events

          - type: history-graph
            title: "Access History"
            entities:
              - entity: input_boolean.daily_code_used
              - entity: switch.tasmota
            hours_to_show: 24

          - type: entities
            title: "System Status"
            entities:
              - entity: input_text.version
                name: "System Version"
              - entity: input_text.version_lockcontrol
                name: "Lock Control Version"
              - entity: input_number.max_attempts
                name: "Max Access Attempts"
              - entity: input_number.lockout_duration
                name: "Lockout Duration"

# Add Custom UI Elements

